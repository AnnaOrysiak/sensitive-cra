{"version":3,"sources":["utils/config.js","layout/Header.js","components/Story.js","layout/Navigation.js","components/News.js","layout/Main.js","layout/Footer.js","layout/App.js","serviceWorker.js","index.js"],"names":["config","baseUrl","baseCorsUrl","Header","className","Story","props","console","log","storyTitle","Navigation","state","active","navigationHandler","setState","prevState","stories","this","length","storiesList","map","story","key","_id","title","onClick","Component","News","description","date","utfDate","Date","toLocaleDateString","Main","newsList","content","item","Footer","App","news","fetch","then","res","ok","json","Error","status","data","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAKeA,EALA,CACbC,QAAS,+CACTC,YAAa,oFCSAC,G,MARA,WACb,OACE,4BAAQC,UAAU,aCOPC,EAVD,SAACC,GAGb,OADAC,QAAQC,IAAIF,GAEV,wBAAIF,UAAU,cACXE,EAAMG,aCoCEC,G,iNAtCbC,MAAQ,CACNC,QAAQ,G,EAGVC,kBAAoB,WAClB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAAEH,QAASG,EAAUH,Y,wEAGzC,IAEAI,EAAYC,KAAKX,MAAjBU,QAERT,QAAQC,IAAIQ,EAAQE,QACpB,IAAIC,EAAc,GAMlB,OAJIH,EAAQE,OAAS,IACnBC,EAAcH,EAAQI,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAOC,IAAKD,EAAME,IAAKd,WAAYY,EAAMG,YAI5E,yBAAKpB,UAAWa,KAAKN,MAAMC,OAAS,oBAAsB,cACxD,yBAAKR,UAAU,kBAAkBqB,QAASR,KAAKJ,mBAC7C,0BAAMT,UAAU,qBAChB,0BAAMA,UAAU,qBAChB,0BAAMA,UAAU,sBAElB,yBAAKA,UAAU,QACb,0BAAMA,UAAU,QAAhB,YACA,0BAAMA,UAAU,QAAhB,SACA,2CACA,wBAAIA,UAAU,QACXe,S,GAhCYO,cCaVC,EAfF,SAACrB,GAAW,IAEfkB,EAA6BlB,EAA7BkB,MAAOI,EAAsBtB,EAAtBsB,YAAaC,EAASvB,EAATuB,KACtBC,EAAU,IAAIC,KAAKF,GAEzB,OACE,6BAASzB,UAAU,eACjB,4BAAKoB,GACL,8BAAOM,EAAQE,sBACf,uBAAG5B,UAAU,4BAA4BwB,KCYhCK,G,MAnBF,SAAC3B,GAEZ,IAAI4B,EAAW,GACPC,EAAY7B,EAAZ6B,QAOR,OALIA,IACFD,EAAWC,EAAQf,KAAI,SAAAgB,GAAI,OAAI,kBAAC,EAAD,CAAMd,IAAKc,EAAKb,IAAKC,MAAOY,EAAKZ,MAAOK,KAAMO,EAAKP,KAAMD,YAAaQ,EAAKR,kBAK1G,oCACE,8BACGM,MCJMG,G,MAVA,WACb,OACE,oCACE,4BAAQjC,UAAU,UAChB,4CCgDOkC,E,2MA9Cb3B,MAAQ,CACN4B,KAAM,GACNvB,QAAS,I,mFAGU,IAAD,OAElBwB,MAAM,GAAD,OAAIxC,EAAOE,YAAX,SACFuC,MAAK,SAAAC,GACJ,GAAIA,EAAIC,GACN,OAAOD,EAAIE,OAEX,MAAM,IAAIC,MAAM,SAAUH,EAAII,WAGjCL,MAAK,SAAAM,GAAI,OAAI,EAAKjC,SAAS,CAAEyB,KAAMQ,OACnCC,OAAM,SAAAC,GAAG,OAAI1C,QAAQC,IAAIyC,MAE5BT,MAAM,GAAD,OAAIxC,EAAOE,YAAX,YACFuC,MAAK,SAAAC,GACJ,GAAIA,EAAIC,GACN,OAAOD,EAAIE,OAEX,MAAM,IAAIC,MAAM,SAAUH,EAAII,WAGjCL,MAAK,SAAAM,GAAI,OAAI,EAAKjC,SAAS,CAAEE,QAAS+B,OACtCC,OAAM,SAAAC,GAAG,OAAI1C,QAAQC,IAAIyC,Q,+BAIpB,IAAD,EAEmBhC,KAAKN,MAAvB4B,EAFD,EAECA,KAAMvB,EAFP,EAEOA,QAEd,OACE,oCACE,kBAAC,EAAD,CAAYA,QAASA,IACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMmB,QAASI,IACf,kBAAC,EAAD,W,GAzCUb,aCIEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.037f4a49.chunk.js","sourcesContent":["const config = {\r\n  baseUrl: \"https://sensitive-express.herokuapp.com/api/\",\r\n  baseCorsUrl: \"https://cors-anywhere.herokuapp.com/https://sensitive-express.herokuapp.com/api/\",\r\n}\r\n\r\nexport default config;","import React from 'react';\r\nimport '../style/header.css'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"banner\">\r\n\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Story = (props) => {\r\n\r\n  console.log(props);\r\n  return (\r\n    <li className=\"list__item\">\r\n      {props.storyTitle}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Story;","import React, { Component } from 'react';\r\nimport Story from '../components/Story';\r\nimport '../style/navigation.css';\r\n\r\nclass Navigation extends Component {\r\n  state = {\r\n    active: false,\r\n  }\r\n\r\n  navigationHandler = () => {\r\n    this.setState(prevState => ({ active: !prevState.active }))\r\n  }\r\n\r\n  render() {\r\n\r\n    const { stories } = this.props;\r\n\r\n    console.log(stories.length);\r\n    let storiesList = [];\r\n\r\n    if (stories.length > 0) {\r\n      storiesList = stories.map(story => <Story key={story._id} storyTitle={story.title} />)\r\n    }\r\n\r\n    return (\r\n      <nav className={this.state.active ? 'navigation active' : 'navigation'} >\r\n        <div className=\"btn menu-button\" onClick={this.navigationHandler}>\r\n          <span className=\"menu-button__bar\"></span>\r\n          <span className=\"menu-button__bar\"></span>\r\n          <span className=\"menu-button__bar\"></span>\r\n        </div>\r\n        <div className=\"menu\">\r\n          <span className=\"icon\">start / </span>\r\n          <span className=\"icon\">login</span>\r\n          <h3>Opowiadania</h3>\r\n          <ul className=\"list\">\r\n            {storiesList}\r\n          </ul>\r\n        </div>\r\n      </nav >);\r\n  }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst News = (props) => {\r\n\r\n  const { title, description, date } = props;\r\n  const utfDate = new Date(date);\r\n\r\n  return (\r\n    <article className=\"articleNews\">\r\n      <h3>{title}</h3>\r\n      <span>{utfDate.toLocaleDateString()}</span>\r\n      <p className=\"articleNews__description\">{description}</p>\r\n    </article>\r\n\r\n  );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport News from '../components/News';\r\nimport '../style/main.css';\r\n\r\nconst Main = (props) => {\r\n\r\n  let newsList = [];\r\n  const { content } = props;\r\n\r\n  if (content) {\r\n    newsList = content.map(item => <News key={item._id} title={item.title} date={item.date} description={item.description} />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        {newsList}\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport '../style/footer.css'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n      <footer className=\"footer\">\r\n        <p>Sensitive</p>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport config from '../utils/config';\nimport Header from './Header';\nimport Navigation from './Navigation';\nimport Main from './Main';\nimport Footer from './Footer';\n\n\nclass App extends Component {\n  state = {\n    news: [],\n    stories: [],\n  }\n\n  componentDidMount() {\n\n    fetch(`${config.baseCorsUrl}news`)\n      .then(res => {\n        if (res.ok) {\n          return res.json()\n        } else {\n          throw new Error(\"error \", res.status)\n        }\n      })\n      .then(data => this.setState({ news: data }))\n      .catch(err => console.log(err));\n\n    fetch(`${config.baseCorsUrl}stories`)\n      .then(res => {\n        if (res.ok) {\n          return res.json()\n        } else {\n          throw new Error(\"error \", res.status)\n        }\n      })\n      .then(data => this.setState({ stories: data }))\n      .catch(err => console.log(err));\n\n  }\n\n  render() {\n\n    const { news, stories } = this.state\n\n    return (\n      <>\n        <Navigation stories={stories} />\n        <Header />\n        <Main content={news} />\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}