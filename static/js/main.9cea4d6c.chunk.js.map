{"version":3,"sources":["utils/config.js","layout/Header.js","components/StoryListElement.js","components/Loader.js","layout/Navigation.js","components/News.js","components/Story.js","layout/Main.js","layout/Footer.js","layout/App.js","serviceWorker.js","index.js"],"names":["config","baseUrl","baseCorsUrl","Header","className","StoryListElement","props","storyId","chapterTitle","storyTitle","getStoryHandler","navigationHandler","value","onClick","e","setTimeout","Loader","Navigation","state","active","setState","prevState","this","stories","getNewsHandler","storiesList","length","map","story","key","_id","title","chapter","Component","News","description","date","utfDate","Date","toLocaleDateString","Story","console","log","type","content","authors","parse","Main","mainContent","storyContent","item","Footer","App","news","target","id","fetch","then","res","ok","json","Error","status","data","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9cea4d6c.chunk.js","sourcesContent":["const config = {\r\n  baseUrl: \"https://sensitive-express.herokuapp.com/api/\",\r\n  baseCorsUrl: \"https://cors-anywhere.herokuapp.com/https://sensitive-express.herokuapp.com/api/\",\r\n}\r\n\r\nexport default config;","import React from 'react';\r\nimport '../style/header.css'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"banner\">\r\n\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst StoryListElement = (props) => {\r\n  const { storyId, chapterTitle, storyTitle, getStoryHandler, navigationHandler } = props;\r\n\r\n  const clickHandler = (e) => {\r\n    getStoryHandler(e)\r\n    setTimeout(navigationHandler, 500);\r\n  }\r\n\r\n  return (\r\n    <li>\r\n      <button className=\"menu__item\" value={storyId} onClick={clickHandler}>\r\n        {chapterTitle} ({storyTitle})\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default StoryListElement;","import React from 'react';\r\nimport '../style/loader.css';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loading-circle\">\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;","import React, { Component } from 'react';\r\nimport StoryListElement from '../components/StoryListElement';\r\nimport Loader from '../components/Loader';\r\nimport '../style/navigation.css';\r\n\r\nclass Navigation extends Component {\r\n  state = {\r\n    active: false,\r\n  }\r\n\r\n  navigationHandler = () => {\r\n    this.setState(prevState => ({ active: !prevState.active }))\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const { stories, getStoryHandler, getNewsHandler } = this.props;\r\n\r\n    const goToTheStart = () => {\r\n      getNewsHandler();\r\n      this.navigationHandler();\r\n    };\r\n\r\n    let storiesList = [];\r\n\r\n    if (stories.length > 0) {\r\n      storiesList = stories.map(story => <StoryListElement key={story._id} storyTitle={story.title} chapterTitle={story.chapter} storyId={story._id} getStoryHandler={getStoryHandler} navigationHandler={this.navigationHandler} />)\r\n    }\r\n\r\n    return (\r\n      <nav className={this.state.active ? 'navigation active' : 'navigation'} >\r\n        <div className=\"btn menu-button\" onClick={this.navigationHandler}>\r\n          <span className=\"menu-button__bar\"></span>\r\n          <span className=\"menu-button__bar\"></span>\r\n          <span className=\"menu-button__bar\"></span>\r\n        </div>\r\n        <div className=\"menu\">\r\n          <section className=\"icons\">\r\n            <button onClick={goToTheStart}><span className=\"icon\">start</span></button>\r\n            <button><span className=\"icon\">login</span></button>\r\n          </section>\r\n\r\n          <h3 className=\"menu__header\">Opowiadania</h3>\r\n          <ul className=\"menu__list\">\r\n            {stories.length ? storiesList : <Loader />}\r\n          </ul>\r\n        </div>\r\n      </nav >);\r\n  }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst News = (props) => {\r\n\r\n  const { title, description, date } = props;\r\n  const utfDate = new Date(date);\r\n\r\n  return (\r\n    <article className=\"articleNews\">\r\n      <h3>{title}</h3>\r\n      <span>{utfDate.toLocaleDateString()}</span>\r\n      <p className=\"articleNews__description\">{description}</p>\r\n    </article>\r\n\r\n  );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport parse from 'html-react-parser';\r\nimport '../style/story.css';\r\n\r\nconst Story = (props) => {\r\n\r\n  console.log(props);\r\n\r\n  const { type, title, chapter, content, authors } = props.story;\r\n\r\n  return (\r\n    <article className=\"story\">\r\n      <small>{title} / {chapter} </small>\r\n      <h3 className=\"story__title\">{chapter}</h3>\r\n      <div className=\"story__content\">{parse(content)}</div>\r\n      <p className=\"story__authors\">{authors}</p>\r\n\r\n      {/* pagination here */}\r\n      {type === \"story\" ? <p>\"pagination\"</p> : <p>\"no-pagination\"</p>}\r\n      {/* end of pagination */}\r\n    </article>\r\n\r\n  );\r\n}\r\n\r\nexport default Story;","import React from 'react';\r\nimport News from '../components/News';\r\nimport Story from '../components/Story';\r\nimport Loader from '../components/Loader';\r\nimport '../style/main.css';\r\n\r\nconst Main = (props) => {\r\n\r\n  let mainContent = [];\r\n  const { storyContent, content } = props;\r\n\r\n  if (content) {\r\n    if (storyContent) {\r\n      mainContent = content.map(item => <Story key={item._id} story={item} />)\r\n    } else {\r\n      mainContent = content.map(item => <News key={item._id} title={item.title} date={item.date} description={item.description} />\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <main className=\"mainContainer\">\r\n        {content.length ? mainContent : <Loader />}\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport '../style/footer.css'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n      <footer className=\"footer\">\r\n        <p>Sensitive</p>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport config from '../utils/config';\nimport Header from './Header';\nimport Navigation from './Navigation';\nimport Main from './Main';\nimport Footer from './Footer';\n\n\nclass App extends Component {\n  state = {\n    news: [],\n    stories: [],\n    story: [],\n    storyContent: false,\n  }\n\n  getNewsHandler = () => {\n    this.setState({ storyContent: false })\n  }\n\n  getStoryHandler = (e) => {\n    console.log(e.target.value);\n\n    const id = e.target.value;\n\n    fetch(`${config.baseCorsUrl}story/${id}`)\n      .then(res => {\n        if (res.ok) {\n          return res.json()\n        } else {\n          throw new Error(\"error \", res.status)\n        }\n      })\n      .then(data => this.setState({\n        story: [data],\n        storyContent: true\n      }))\n      .catch(err => console.log(err));\n\n  }\n\n  componentDidMount() {\n\n    // use HOF\n\n    fetch(`${config.baseCorsUrl}news`)\n      .then(res => {\n        if (res.ok) {\n          return res.json()\n        } else {\n          throw new Error(\"error \", res.status)\n        }\n      })\n      .then(data => this.setState({ news: data }))\n      .catch(err => console.log(err));\n\n    fetch(`${config.baseCorsUrl}stories`)\n      .then(res => {\n        if (res.ok) {\n          return res.json()\n        } else {\n          throw new Error(\"error \", res.status)\n        }\n      })\n      .then(data => this.setState({ stories: data }))\n      .catch(err => console.log(err));\n\n  }\n\n  render() {\n\n    const { news, stories, story, storyContent } = this.state\n\n    return (\n      <>\n        <Navigation stories={stories} getStoryHandler={this.getStoryHandler} getNewsHandler={this.getNewsHandler} />\n        <Header />\n        <Main storyContent={storyContent} content={storyContent ? story : news} />\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}